import { Injectable, BadRequestException } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { DataSource } from 'typeorm';
import { InjectDataSource } from '@nestjs/typeorm';

@Injectable()
export class GeminiService {
  private genAI: GoogleGenerativeAI;

  constructor(
    private configService: ConfigService,
    @InjectDataSource() private dataSource: DataSource
  ) {
    const apiKey = this.configService.get<string>('GEMINI_API_KEY');
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY not found in environment variables');
    }
    this.genAI = new GoogleGenerativeAI(apiKey);
  }
  async askSQL(
    userQuestion: string,
    chatHistory: string = ''
  ): Promise<{ answer: string; sqlQuery: string; data: any }> {
    try {
      const model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });      const databaseSchema = `
# DATABASE SCHEMA
## B·∫£ng users:
- id: SERIAL PRIMARY KEY
- username: VARCHAR(100) UNIQUE
- email: VARCHAR(255) UNIQUE  
- password: VARCHAR(255)
- "firstName": VARCHAR(100) (ch√∫ √Ω: camelCase, c·∫ßn d√πng quotes)
- "lastName": VARCHAR(100) (ch√∫ √Ω: camelCase, c·∫ßn d√πng quotes)
- "isActive": BOOLEAN DEFAULT true (ch√∫ √Ω: camelCase, c·∫ßn d√πng quotes)
- "createdAt": TIMESTAMP DEFAULT CURRENT_TIMESTAMP (ch√∫ √Ω: camelCase, c·∫ßn d√πng quotes)
- "roleId": INTEGER DEFAULT 1 (ch√∫ √Ω: camelCase, c·∫ßn d√πng quotes)

## B·∫£ng roles:
- id: SERIAL PRIMARY KEY
- name: VARCHAR(50) UNIQUE
- description: TEXT

## B·∫£ng chats:
- id: UUID PRIMARY KEY
- session_id: VARCHAR(255)
- message: TEXT
- role: VARCHAR(10) (user/assistant)
- sql_query: TEXT
- data: JSON
- created_at: TIMESTAMP

L∆ØU √ù QUAN TR·ªåNG: 
- PostgreSQL ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng
- C√°c column c√≥ camelCase ph·∫£i ƒë∆∞·ª£c bao quanh b·ªüi d·∫•u ngo·∫∑c k√©p
- VD: SELECT id, username, "firstName", "lastName", "isActive" FROM users
`;      const prompt = `
B·∫°n l√† chuy√™n gia SQL v√† Database PostgreSQL. Nhi·ªám v·ª•:
1. Ph√¢n t√≠ch c√¢u h·ªèi c·ªßa user
2. T·∫°o c√¢u SQL ph√π h·ª£p v·ªõi PostgreSQL syntax
3. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát

DATABASE HI·ªÜN T·∫†I (PostgreSQL):
${databaseSchema}

${chatHistory ? `L·ªäCH S·ª¨ CHAT:\n${chatHistory}\n` : ''}

C√ÇU H·ªéI: ${userQuestion}

QUAN TR·ªåNG - PostgreSQL Rules:
- Column names c√≥ camelCase PH·∫¢I d√πng d·∫•u ngo·∫∑c k√©p: "firstName", "lastName", "isActive", "createdAt"
- Column names th∆∞·ªùng (username, email, password) KH√îNG c·∫ßn ngo·∫∑c k√©p
- VD ƒë√∫ng: SELECT id, username, "firstName", "lastName" FROM users
- VD sai: SELECT id, username, first_name, last_name FROM users

Tr·∫£ v·ªÅ JSON format:
{
  "answer": "Gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát",
  "sqlQuery": "SELECT id, username, \"firstName\" FROM users...",
  "data": null
}

Ch·ªâ t·∫°o SQL an to√†n (SELECT queries only).
`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();      // Parse JSON response
      try {
        const jsonMatch = text.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const parsed = JSON.parse(jsonMatch[0]);
          const sqlQuery = parsed.sqlQuery || '';
            // Th·ª±c thi SQL query n·∫øu c√≥
          let data: any = null;
          if (sqlQuery && this.isSafeQuery(sqlQuery)) {
            try {
              data = await this.dataSource.query(sqlQuery);
            } catch (sqlError) {
              console.error('SQL execution error:', sqlError);
              data = { error: 'Kh√¥ng th·ªÉ th·ª±c thi SQL query', details: sqlError.message };
            }
          }
          
          return {
            answer: parsed.answer || 'ƒê√£ t·∫°o SQL query',
            sqlQuery,
            data
          };
        }
      } catch (parseError) {
        console.warn('JSON parse failed, extracting SQL manually');
      }      // Fallback: extract SQL manually
      const sqlQuery = this.extractSQL(text);
      let data: any = null;
      
      if (sqlQuery && this.isSafeQuery(sqlQuery)) {
        try {
          data = await this.dataSource.query(sqlQuery);
        } catch (sqlError) {
          console.error('SQL execution error:', sqlError);
          data = { error: 'Kh√¥ng th·ªÉ th·ª±c thi SQL query', details: sqlError.message };
        }
      }
      
      return {
        answer: text,
        sqlQuery,
        data
      };

    } catch (error) {
      console.error('Gemini API error:', error);
      throw new BadRequestException(`L·ªói AI: ${error.message}`);
    }
  }
  async generateVocabularyResponse(message: string, userId: number): Promise<any> {
    try {
      // 1. L·∫•y c·∫•u tr√∫c b·∫£ng vocabulary t·ª´ database
      const tableStructure = await this.dataSource.query(`
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns 
        WHERE table_name = 'vocabularies'
        ORDER BY ordinal_position
      `);
      
      // 2. L·∫•y t·ª´ v·ª±ng c·ªßa user
      const vocabularyData = await this.dataSource.query(`
        SELECT * FROM vocabularies 
        WHERE "userId" = $1 
        ORDER BY "nextReviewDate" ASC, status ASC
        LIMIT 50
      `, [userId]);
      
      // 3. L·∫•y th·ªëng k√™ ƒë·ªÉ t·∫°o context
      const stats = await this.dataSource.query(`
        SELECT 
          COUNT(*) as total,
          COUNT(*) FILTER (WHERE status = 0) as new_words,
          COUNT(*) FILTER (WHERE status = 1) as learning,
          COUNT(*) FILTER (WHERE status = 2) as reviewing,
          COUNT(*) FILTER (WHERE status = 3) as mastered,
          COUNT(*) FILTER (WHERE "nextReviewDate" <= CURRENT_DATE) as due_today
        FROM vocabularies 
        WHERE "userId" = $1
      `, [userId]);
      
      // 4. T·∫°o context cho Gemini
      const contextPrompt = `
        # VOCABULARY LEARNING ASSISTANT üìö
        
        ## DATABASE STRUCTURE:
        Table: vocabularies
        ${tableStructure.map(col => `- ${col.column_name}: ${col.data_type} (${col.is_nullable === 'YES' ? 'nullable' : 'not null'})`).join('\n')}
        
        ## USER STATISTICS:
        - T·ªïng t·ª´ v·ª±ng: ${stats[0]?.total || 0}
        - T·ª´ m·ªõi: ${stats[0]?.new_words || 0}
        - ƒêang h·ªçc: ${stats[0]?.learning || 0}
        - ƒêang √¥n t·∫≠p: ${stats[0]?.reviewing || 0}
        - ƒê√£ thu·ªôc: ${stats[0]?.mastered || 0}
        - C·∫ßn √¥n h√¥m nay: ${stats[0]?.due_today || 0}
        
        ## VOCABULARY LIST:
        ${vocabularyData.length > 0 ? vocabularyData.map((v, i) => `
        ${i+1}. **${v.word}** 
           - Nghƒ©a: ${v.meaning}
           - V√≠ d·ª•: ${v.example || 'Ch∆∞a c√≥'}
           - Ph√¢n lo·∫°i: ${v.category || 'Ch∆∞a ph√¢n lo·∫°i'}
           - C·∫•p ƒë·ªô: ${v.level || 'Ch∆∞a x√°c ƒë·ªãnh'}
           - Tr·∫°ng th√°i: ${this.getStatusText(v.status)}
           - Ng√†y √¥n t·∫≠p ti·∫øp: ${new Date(v.nextReviewDate).toLocaleDateString('vi-VN')}
           - ID: ${v.id}
        `).join('\n') : 'Ch∆∞a c√≥ t·ª´ v·ª±ng n√†o.'}
        
        ## NHI·ªÜM V·ª§ C·ª¶A B·∫†N:
        1. **Ph√¢n t√≠ch y√™u c·∫ßu** c·ªßa ng∆∞·ªùi d√πng
        2. **T·∫°o b√†i t·∫≠p ph√π h·ª£p** d·ª±a tr√™n t·ª´ v·ª±ng hi·ªán c√≥
        3. **ƒê∆∞a ra g·ª£i √Ω h·ªçc t·∫≠p** th√¥ng minh
        4. **T·∫°o c√¢u h·ªèi ki·ªÉm tra** ki·∫øn th·ª©c
        5. **H∆∞·ªõng d·∫´n c·∫≠p nh·∫≠t** tr·∫°ng th√°i h·ªçc t·∫≠p
        
        ## C√ÅC LO·∫†I B√ÄI T·∫¨P C√ì TH·ªÇ T·∫†O:
        - **Tr·∫Øc nghi·ªám**: Ch·ªçn nghƒ©a ƒë√∫ng c·ªßa t·ª´
        - **ƒêi·ªÅn t·ª´**: ƒêi·ªÅn v√†o ch·ªó tr·ªëng trong c√¢u
        - **Gh√©p ƒë√¥i**: Gh√©p t·ª´ v·ªõi nghƒ©a
        - **T·∫°o c√¢u**: D√πng t·ª´ ƒë·ªÉ t·∫°o c√¢u m·ªõi
        - **Ph√¢n lo·∫°i**: S·∫Øp x·∫øp t·ª´ theo ch·ªß ƒë·ªÅ
        
        ## H∆Ø·ªöNG D·∫™N API:
        - Th√™m t·ª´ m·ªõi: POST /vocabulary
        - C·∫≠p nh·∫≠t tr·∫°ng th√°i: PUT /vocabulary/:id/review
        - Xem t·ª´ c·∫ßn √¥n: GET /vocabulary/due-today
        
        ## Y√äU C·∫¶U C·ª¶A NG∆Ø·ªúI D√ôNG:
        "${message}"
        
        H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† h·ªØu √≠ch. N·∫øu t·∫°o b√†i t·∫≠p, h√£y ƒë∆∞a ra ƒë√°p √°n sau khi ng∆∞·ªùi d√πng tr·∫£ l·ªùi.
      `;
      
      const model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
      const result = await model.generateContent(contextPrompt);
      const response = await result.response;
      const text = response.text();
      
      return {
        message: text.trim(),
        userStats: stats[0],
        vocabularyCount: vocabularyData.length,
        dueToday: stats[0]?.due_today || 0,
        recentWords: vocabularyData.slice(0, 5) // 5 t·ª´ g·∫ßn nh·∫•t ƒë·ªÉ preview
      };
    } catch (error) {
      console.error('Gemini Vocabulary error:', error);
      return {
        message: "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu v·ªÅ t·ª´ v·ª±ng l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.",
        error: error.message
      };
    }
  }

  private getStatusText(status: number): string {
    switch(status) {
      case 0: return "T·ª´ m·ªõi üÜï";
      case 1: return "ƒêang h·ªçc üìö"; 
      case 2: return "ƒêang √¥n t·∫≠p üîÑ";
      case 3: return "ƒê√£ thu·ªôc ‚úÖ";
      default: return "Kh√¥ng x√°c ƒë·ªãnh ‚ùì";
    }
  }

  private extractSQL(text: string): string {
    const patterns = [
      /```sql\s*([\s\S]*?)\s*```/i,
      /```\s*(SELECT[\s\S]*?);/i,
      /(SELECT[\s\S]*?;)/i,
    ];

    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match) {
        return match[1].trim();
      }
    }
    return '';
  }

  private isSafeQuery(sql: string): boolean {
    const query = sql.trim().toLowerCase();
    
    // Ch·ªâ cho ph√©p SELECT queries
    if (!query.startsWith('select')) {
      return false;
    }
    
    // Kh√¥ng cho ph√©p c√°c t·ª´ kh√≥a nguy hi·ªÉm
    const dangerousKeywords = [
      'drop', 'delete', 'update', 'insert', 'create', 'alter', 
      'truncate', 'exec', 'execute', 'sp_', 'xp_'
    ];
    
    for (const keyword of dangerousKeywords) {
      if (query.includes(keyword)) {
        return false;
      }
    }
    
    return true;
  }
}
